{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":0},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":0},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":0},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":0},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":0},{"_id":"themes/next/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0},{"_id":"source/images/favicon.png","path":"images/favicon.png","modified":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0},{"_id":"source/images/djangoBasic_url-dispatch.png","path":"images/djangoBasic_url-dispatch.png","modified":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0},{"_id":"source/images/HaCaT_Boucamp_1988_ger.pdf","path":"images/HaCaT_Boucamp_1988_ger.pdf","modified":0}],"Cache":[{"_id":"source/_posts/2014-11-18-VPS-config.markdown","shasum":"a02da84d5f7ef72124514551c7a2a1a0b35885d0","modified":1448837076000},{"_id":"source/_posts/2014-11-18-linux-user-config.markdown","shasum":"67f7ee865c2e3587b16d304862979e2221976739","modified":1448228694000},{"_id":"source/_posts/2015-11-15-django-tutorial.markdown","shasum":"0ffefa974928fe2cd1c63f76d2e3e0dc7062b0f2","modified":1449100315000},{"_id":"source/_posts/2015-11-16-hacat-cells-protocol.markdown","shasum":"492ae5966a631daf0ec2b6ab915818dc7812862e","modified":1449100321000},{"_id":"source/_posts/2015-11-17-hello-world.markdown","shasum":"bed25dea23a901a54d61f673b7721b642585915c","modified":1448228670000},{"_id":"source/_posts/2015-11-18-django-basic.markdown","shasum":"ee3e6b97fe67c9e0d8fd201e76c048ed3a86349e","modified":1449100330000},{"_id":"source/_posts/2015-11-23-shell-config-windows.markdown","shasum":"9e01f0fa560150e2628b3e4a4f863827f55be803","modified":1448837076000},{"_id":"source/_posts/2015-11-7-EBML-Note.markdown","shasum":"093804eab992b3d4833c2efc74a216cd96ecf57e","modified":1448228721000},{"_id":"source/_posts/hello-world.md","shasum":"774b507901d9b17991ace2a70263b6dd6d11999a","modified":1449088227000},{"_id":"source/about/index.md","shasum":"e3fc0dcf0aece4320784a72a9c20dd6a5c13ef4b","modified":1449097777000},{"_id":"source/categories/index.md","shasum":"2ffdc958b7ae633ef66df9a06608751a2440e58c","modified":1449100815000},{"_id":"source/images/avatar.png","shasum":"88cd53010b3c2033e5e584e4baa811a5dca40029","modified":1448224905000},{"_id":"source/images/djangoBasic_url-dispatch.png","shasum":"8320b8a9eee0fc5ebb0c90e9e7e8f57e9fc876e9","modified":1448224905000},{"_id":"source/images/favicon.ico","shasum":"80c0f924777ce7ecc3aa6d1aec146bbd2fa6279f","modified":1447138646000},{"_id":"source/images/favicon.png","shasum":"20b2b18ee8b0809802a091aefd3607e356a84389","modified":1447138646000},{"_id":"source/tags/index.md","shasum":"4556b34401f376e613d3af218d5409465c06cdb1","modified":1449100810000},{"_id":"themes/next/source/css/_common/_page/home.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1449092380000},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1449092380000},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1449092380000},{"_id":"themes/next/source/css/_mixins/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1449092380000},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1449092380000},{"_id":"themes/next/README.en.md","shasum":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1449092380000},{"_id":"themes/next/README.md","shasum":"0b709591995001cd860384d6c189e51d91690714","modified":1449092380000},{"_id":"themes/next/_config.yml","shasum":"96fd4982092a5eba0977a07cabcf7b6bfdad7bd6","modified":1449101119000},{"_id":"themes/next/bower.json","shasum":"4a53cab758c7d69be2ce773b2afff7dd962b7cb0","modified":1449092380000},{"_id":"themes/next/languages/de.yml","shasum":"7a8de0e5665c52a1bf168c1e7dd222c8a74fb0ab","modified":1449092380000},{"_id":"themes/next/languages/default.yml","shasum":"f57623e47f533c8d53d859628fa6a368a5298a00","modified":1449092380000},{"_id":"themes/next/languages/en.yml","shasum":"f57623e47f533c8d53d859628fa6a368a5298a00","modified":1449092380000},{"_id":"themes/next/languages/fr-FR.yml","shasum":"2cec663601ac8d178e97aee91d967fa99a95ad4e","modified":1449092380000},{"_id":"themes/next/languages/pt.yml","shasum":"8e38fdf3a5232b428d2e4a641666dbabab87c3d1","modified":1449092380000},{"_id":"themes/next/languages/ru.yml","shasum":"1d1b158f9cff1b38978086043f299b3fc590e007","modified":1449092380000},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"c01d18d5c3837bb04d263e845db8f6827fde65de","modified":1449092380000},{"_id":"themes/next/languages/zh-hk.yml","shasum":"248b88c825fde8e35839f3954d38df4e72a0537c","modified":1449092380000},{"_id":"themes/next/languages/zh-tw.yml","shasum":"42ba1d0c6b6026ba1e613ad11efb75432a8132ac","modified":1449092380000},{"_id":"themes/next/layout/_layout.swig","shasum":"4efe52f310b797f4bdedacbd979caf285d2bc731","modified":1449092380000},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"9032ae9056cb19b4c2d069d66ead7abf828f9922","modified":1449092380000},{"_id":"themes/next/layout/_macro/post.swig","shasum":"f32eaace2afb0450cf230f96ee8c87f20d6a9072","modified":1449092380000},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"88e179ff660874135b17d0febc91d04749053a73","modified":1449092380000},{"_id":"themes/next/layout/_partials/comments.swig","shasum":"a612a4eca51ffc87b53a5470b451071a7ad6a031","modified":1449092380000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","shasum":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1449092380000},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"970a669aae1889d37b2028d174d9d45e88dc0e4f","modified":1449092380000},{"_id":"themes/next/layout/_partials/head.swig","shasum":"fcef099c268bd4964e65cfe3109e3fe99d0b925c","modified":1449092380000},{"_id":"themes/next/layout/_partials/header.swig","shasum":"476333c49a1e7e0402a68a826f67527ac258969d","modified":1449092380000},{"_id":"themes/next/layout/_partials/old-browsers.swig","shasum":"dbbfea810bf3a2ed9c83b9a6683037175aacfc67","modified":1449092380000},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1449092380000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"00c2b49f6289198b0b2b4e157e4ee783277f32a7","modified":1449092380000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"eefe2388ff3d424694045eda21346989b123977c","modified":1449092380000},{"_id":"themes/next/layout/_partials/search.swig","shasum":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1449092380000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1449092380000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"63315fcf210799f894208c9f512737096df84962","modified":1449092380000},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","shasum":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1449092380000},{"_id":"themes/next/layout/_scripts/analytics/facebook-sdk.swig","shasum":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1449092380000},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","shasum":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1449092380000},{"_id":"themes/next/layout/_scripts/analytics.swig","shasum":"33ca06b9bd9a15a19432d5396b85bd319f017319","modified":1449092380000},{"_id":"themes/next/layout/_scripts/baidushare.swig","shasum":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1449092380000},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","shasum":"85295f126836b95f0837d03e58228bb3cf8c4490","modified":1449092380000},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","shasum":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1449092380000},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","shasum":"44e3d567fd49c2a093f4a0a8af9f00542c935a58","modified":1449092380000},{"_id":"themes/next/layout/_scripts/fancy-box.swig","shasum":"41b4ff1446060c88c33bf666a32277dcf12129f0","modified":1449092380000},{"_id":"themes/next/layout/_scripts/helpers.swig","shasum":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1449092380000},{"_id":"themes/next/layout/_scripts/mathjax.swig","shasum":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1449092380000},{"_id":"themes/next/layout/_scripts/motion.swig","shasum":"0d9761e3b1bb9e666ccc71bad59f035deb5a88c6","modified":1449092380000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"7a34b02808f144ee4a11032ae3a149eb634a7e82","modified":1449092380000},{"_id":"themes/next/layout/_scripts/tinysou.swig","shasum":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1449092380000},{"_id":"themes/next/layout/archive.swig","shasum":"0c3ce594759f347ea90a4ce592a7a18e2ae4cc5c","modified":1449092380000},{"_id":"themes/next/layout/category.swig","shasum":"d6b3e1dc5e0b8deade9a084c463126e70188ee9b","modified":1449092380000},{"_id":"themes/next/layout/index.swig","shasum":"38b1ad401b748965369296b86327d23082a1fe93","modified":1449092380000},{"_id":"themes/next/layout/page.swig","shasum":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1449092380000},{"_id":"themes/next/layout/post.swig","shasum":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1449092380000},{"_id":"themes/next/layout/tag.swig","shasum":"aab44af54fcbc66fea4ad12b2767ffca3eadd451","modified":1449092380000},{"_id":"themes/next/scripts/filters/sticky.js","shasum":"6b1ea0c09105352813357d0fff4e1d3f4c821fa3","modified":1449092380000},{"_id":"themes/next/scripts/merge-configs.js","shasum":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1449092380000},{"_id":"themes/next/scripts/tags/center-quote.js","shasum":"535fc542781021c4326dec24d8495cbb1387634a","modified":1449092380000},{"_id":"themes/next/scripts/tags/full-image.js","shasum":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1449092380000},{"_id":"themes/next/scripts/tags/group-pictures.js","shasum":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","shasum":"88cd66910260006aa8e9e795df4948d4b67bfa11","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/blockquote-center.styl","shasum":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/buttons.styl","shasum":"81063e0979f04a0f9af37f321d7321dda9abf593","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/comments.styl","shasum":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","shasum":"2d2da815ab0981b219ea1973a4aedede48801411","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/gallery.styl","shasum":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/group-pictures.styl","shasum":"1ee40743000173495728855f734081eb2b6167cc","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","shasum":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/pagination.styl","shasum":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","shasum":"6750b61236eb359028da8f2c4765f7c89b03dc9a","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","shasum":"672d5fa7e5b7642d86a4bda176b501508b54860f","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","shasum":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/posts.styl","shasum":"b05ac51dd266d27f12e39e59a94383fe6474b7b3","modified":1449092380000},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","shasum":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1449092380000},{"_id":"themes/next/source/css/_common/_core/base.styl","shasum":"388aa7c69c97728c64941db01e0f29a88837120c","modified":1449092380000},{"_id":"themes/next/source/css/_common/_core/helpers.styl","shasum":"d339d114e52a9abbc797ec236a8a770c29e288a6","modified":1449092380000},{"_id":"themes/next/source/css/_common/_core/normalize.styl","shasum":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1449092380000},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","shasum":"1f8acb3331300eec696a09e7859e11f191e16d7f","modified":1449092380000},{"_id":"themes/next/source/css/_common/_core/tables.styl","shasum":"5f766cf26f966dbf9dcfe681f40ab9032e3e8a08","modified":1449092380000},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","shasum":"8b809aef383bebaeb3f282b47675f3a364ce3569","modified":1449092380000},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","shasum":"80413afacfa656322100ce1900fed1ebcd8f8f44","modified":1449092380000},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","shasum":"249f75bafa26b99d272352c0646e7497ea680b39","modified":1449092380000},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","shasum":"ec3f86739bede393cafcd3e31052c01115ae20d6","modified":1449092380000},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","shasum":"9cdbedb3627ac941cfb063b152abe5a75c3c699a","modified":1449092380000},{"_id":"themes/next/source/css/_common/_page/archive.styl","shasum":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1449092380000},{"_id":"themes/next/source/css/_common/_page/categories.styl","shasum":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1449092380000},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","shasum":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1449092380000},{"_id":"themes/next/source/css/_common/_section/body.styl","shasum":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1449092380000},{"_id":"themes/next/source/css/_common/_section/footer.styl","shasum":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1449092380000},{"_id":"themes/next/source/css/_common/_section/header.styl","shasum":"a6aa8a56f9f645ae5a76a1034f79adf73b053aa0","modified":1449092380000},{"_id":"themes/next/source/css/_common/_section/layout.styl","shasum":"03ae7b808dde9065412968aa69916162e790455d","modified":1449092380000},{"_id":"themes/next/source/css/_common/_section/media.styl","shasum":"fa9809d2ecc753cf32f70803c1d0821c405211f4","modified":1449092380000},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","shasum":"bc106c3e759cd752c2b4c53ac27bc5ef5e3b18ea","modified":1449092380000},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","shasum":"6242be4307a3b3dafc14e556f51c8875c41a1ddd","modified":1449092380000},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","shasum":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1449092380000},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1449092380000},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1449092380000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","shasum":"d50c2a9ae363d26ed2e9bc226a9dc7abeb9ace1b","modified":1449092380000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","shasum":"1631a430655eadb485574d1a9bedd49460988b11","modified":1449092380000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","shasum":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1449092380000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","shasum":"5a8036fc61207ca0fe38c9782ed2f686fbf764be","modified":1449092380000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","shasum":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1449092380000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"fc7d96b897290dbd93bc8c515a2058fc4c374ea7","modified":1449092380000},{"_id":"themes/next/source/css/_schemes/default/_logo.styl","shasum":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1449092380000},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","shasum":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1449092380000},{"_id":"themes/next/source/css/_schemes/default/_search.styl","shasum":"c524bccdc554349106d1c8be9c3f275d4c0d4281","modified":1449092380000},{"_id":"themes/next/source/css/_schemes/default/index.styl","shasum":"159464cb8a7e01e32db9ec70dec391ec70a72f9c","modified":1449092380000},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"9f8791860cc1ca724d2dfe609e8cd6abc44d6926","modified":1449092380000},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"f532d6b0f961a8f3867c06e132233286f110180d","modified":1449092380000},{"_id":"themes/next/source/css/_variables/default.styl","shasum":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1449092380000},{"_id":"themes/next/source/css/main.styl","shasum":"56dacee56c5eaa4b2676d196452314fb50f758aa","modified":1449092380000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1449092380000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1449092380000},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1449092380000},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1449092380000},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1449092380000},{"_id":"themes/next/source/images/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1449092380000},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1449092380000},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1449092380000},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1449092380000},{"_id":"themes/next/source/images/quote-l.svg","shasum":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1449092380000},{"_id":"themes/next/source/images/quote-r.svg","shasum":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1449092380000},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1449092380000},{"_id":"themes/next/source/js/bootstrap.js","shasum":"f9b637b6d064f728d7dc2b6b5058a006a4454299","modified":1449092380000},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1449092380000},{"_id":"themes/next/source/js/fancy-box.js","shasum":"b5fa638ed371b5f658b0826ec4afee25d9986ef2","modified":1449092380000},{"_id":"themes/next/source/js/helpers.js","shasum":"c15216ef897334362789ba37464298948b2eef95","modified":1449092380000},{"_id":"themes/next/source/js/hook-duoshuo.js","shasum":"ccb32e0a1acf798337c9697e1aab5484b52f9df4","modified":1449092380000},{"_id":"themes/next/source/js/motion.js","shasum":"b4132517fe499538ad725094593fb7ead8c04bf7","modified":1449092380000},{"_id":"themes/next/source/js/ua-parser.min.js","shasum":"1148fa2bcb8b2e40c31e5f597bf794a57369a2e6","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1449092380000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1449092380000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1449092380000},{"_id":"themes/next/source/vendors/fastclick/README.md","shasum":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1449092380000},{"_id":"themes/next/source/vendors/fastclick/bower.json","shasum":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1449092380000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","shasum":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1449092380000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","shasum":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1449092380000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1449092380000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","shasum":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1449092380000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","shasum":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1449092380000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","shasum":"0189d278706509412bac4745f96c83984e1d59f4","modified":1449092380000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1449092380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1449092380000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","shasum":"895d50fa29759af7835256522e9dd7dac597765c","modified":1449092380000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","shasum":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1449092380000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","shasum":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1449092380000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","shasum":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1449092380000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","shasum":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1449092380000},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1449092380000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1449092380000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1449092380000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1449092380000},{"_id":"themes/next/test/helpers.js","shasum":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1449092380000},{"_id":"themes/next/test/intern.js","shasum":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1449092380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1449092380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1449092380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1449092380000},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1449092380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1449092380000},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1449092380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1449092380000},{"_id":"source/images/HaCaT_Boucamp_1988_ger.pdf","shasum":"6ef91693905d3a08a1d5380be7e2c1f03a7c005d","modified":1448224905000}],"Category":[{"name":"resource","_id":"cihph4zyx0001t9s1jfsjknf0"},{"name":"programming","_id":"cihph4zzg000ct9s126cs2pc2"},{"name":"resources","_id":"cihph4zzx000mt9s12vuaw61e"},{"name":"others","_id":"cihph5004000yt9s1q2br5loi"},{"name":"research","_id":"cihph50070013t9s1l2p9y6n6"}],"Data":[],"Page":[{"title":"tags","date":"2015-12-02T21:48:39.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-12-02 21:48:39\ntype: \"tags\"\ncomments: false\n---\n","updated":"2015-12-03T00:00:10.000Z","path":"tags/index.html","_id":"cihph4zz40007t9s1b9fxgpha","layout":"page"},{"title":"categories","date":"2015-12-02T22:48:37.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2015-12-02 22:48:37\ntype: \"categories\"\ncomments: false\n---\n","updated":"2015-12-03T00:00:15.000Z","path":"categories/index.html","_id":"cihph4zz90008t9s1qkp0orjh","layout":"page"},{"title":"about","date":"2015-12-02T23:09:37.000Z","_content":"","source":"about/index.md","raw":"title: about\ndate: 2015-12-02 23:09:37\n---\n","updated":"2015-12-02T23:09:37.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cihph4zza0009t9s1982ent8w"}],"Post":[{"layout":"post","title":"VPS Configuration","_content":"\n# vps configuration\n(vpn, fw, ssh port, user)\n\n## ssh port change and no root ssh login\n\n`nano /etc/ssh/sshd_config`\n\nfind port 22, then add `port <port you want>`\n\nsave and restart ssh service with `service ssh restart`\n\nafter testing new port you can comment out port 22\n\n___\n\n## vpn ufw\nrefer [link](http://www.zhihu.com/question/20113381)\n\nconnect use **putty** via ssh in windows\n\n``` bash\nsudo apt-get update\nsudo apt-get dist-upgrade\n```\n\n1. 安装pptpd（VPN服务器）和ufw（防火墙\n`sudo apt-get install pptpd ufw`\n\n2. 修改ufw规则\n```\nsudo ufw allow 22\nsudo ufw allow 1723\nsudo ufw enable\n```\n\n这里请注意，如果你有其他服务运行，例如有网站也运行在这个VPS中，记得同样开启相应的端口，例如网站使用的端口80或者8080，记得加入一下两\n```\nsudo ufw allow 80\nsudo ufw allow 8080\nsudo ufw disable && sudo ufw enable\n```\n\n3. 编辑pptpd选项\n`sudo nano /etc/ppp/pptpd-options`\n\n输入此行命令后会打开一个文档编辑，找到以下三行并注解with“#”\n```\nrefuse-pap\nrefuse-chap\nrefuse-mschap\n```\n之后在最后的地方添加如下信息\n```\nms-dns 8.8.8.8\nms-dns 8.8.4.4\n```\n\n4. 编辑IP信息以及客户端IP地址范围\n`sudo nano /etc/pptpd.conf`\n\n在最后添加：\n```\nlocalip 128.199.171.10  #your vps ip\nremoteip 10.99.99.100-199\n```\n\n5. 添加VPN用户登录信息，就是你登陆VPN的时候使用的用户名密码\n`sudo nano /etc/ppp/chap-secrets`\n\n会打开一个编辑文本，然后按照以下模式添加一个用户账号\n`[Username] [Service] [Password] [Allowed IP Address]`\n\n例如,添加一个 用户名为 fuckGfw，密码为fuckGfwDaddy的vpn账号，可以创建多个，一行一个用户。\n`fuckGfw pptpd fuckGfwDaddy *`\n\n同样，输入完成后按ctrl+x键（退出编辑器）会询问是否保存，点击Y，回车。\n\n6. 重启pptpd\n`sudo /etc/init.d/pptpd restart`\n\n7. 编辑系统设置\n`sudo nano /etc/sysctl.conf`\n找到`#net.ipv4.ip_forward=1`\n去掉前面的#，改完后为`net.ipv4.ip_forward=1`\n\n同样，输入完成后按ctrl+x键（退出编辑器）会询问是否保存，点击Y，回车。\n\n8. 重新加载系统设置\n`sudo sysctl -p`\n\n9. 修改ufw防火墙设置\n`sudo nano /etc/default/ufw`\n\n将\n`DEFAULT_FORWARD_POLICY = \"DROP\"`\n改为\n`DEFAULT_FORWARD_POLICY = \"ACCEPT\"`\n\n同样，输入完成后按ctrl+x键（退出编辑器）会询问是否保存，点击Y，回车。\n\n10. 继续修改ufw防火墙设置\n`sudo nano /etc/ufw/before.rules`\n\n会打开文本编辑，在文本最开始处复制添加如下内容，不要做任何修改，\n\n``` bash\n# NAT table rules\n*nat\n\n:POSTROUTING ACCEPT [0:0]\n# Allow forward traffic to eth0\n-A POSTROUTING -s 10.99.99.0/24 -o eth0 -j MASQUERADE\n\n# Process the NAT table rules\nCOMMIT\n```\n\n11. 重启防火墙\n`sudo ufw disable && sudo ufw enable`\n\n恭喜你！！你的VPN服务器架设成功了！！你现在可以随便(fan)浪(qiang)了 =）。\n\n___\n\n**更新：这里可能有的朋友会看到一条Error信息：**\n`>ERROR: problem running ufw-init`\n\n如果出现这个情况，在你确保没输入错误的命令时，请输入一下命令：\n`ufw --force enable`\n","source":"_posts/2014-11-18-VPS-config.markdown","raw":"---\nlayout: post\ntitle:  \"VPS Configuration\"\ntags: [VPS, linux]\ncategories: resource\n---\n\n# vps configuration\n(vpn, fw, ssh port, user)\n\n## ssh port change and no root ssh login\n\n`nano /etc/ssh/sshd_config`\n\nfind port 22, then add `port <port you want>`\n\nsave and restart ssh service with `service ssh restart`\n\nafter testing new port you can comment out port 22\n\n___\n\n## vpn ufw\nrefer [link](http://www.zhihu.com/question/20113381)\n\nconnect use **putty** via ssh in windows\n\n``` bash\nsudo apt-get update\nsudo apt-get dist-upgrade\n```\n\n1. 安装pptpd（VPN服务器）和ufw（防火墙\n`sudo apt-get install pptpd ufw`\n\n2. 修改ufw规则\n```\nsudo ufw allow 22\nsudo ufw allow 1723\nsudo ufw enable\n```\n\n这里请注意，如果你有其他服务运行，例如有网站也运行在这个VPS中，记得同样开启相应的端口，例如网站使用的端口80或者8080，记得加入一下两\n```\nsudo ufw allow 80\nsudo ufw allow 8080\nsudo ufw disable && sudo ufw enable\n```\n\n3. 编辑pptpd选项\n`sudo nano /etc/ppp/pptpd-options`\n\n输入此行命令后会打开一个文档编辑，找到以下三行并注解with“#”\n```\nrefuse-pap\nrefuse-chap\nrefuse-mschap\n```\n之后在最后的地方添加如下信息\n```\nms-dns 8.8.8.8\nms-dns 8.8.4.4\n```\n\n4. 编辑IP信息以及客户端IP地址范围\n`sudo nano /etc/pptpd.conf`\n\n在最后添加：\n```\nlocalip 128.199.171.10  #your vps ip\nremoteip 10.99.99.100-199\n```\n\n5. 添加VPN用户登录信息，就是你登陆VPN的时候使用的用户名密码\n`sudo nano /etc/ppp/chap-secrets`\n\n会打开一个编辑文本，然后按照以下模式添加一个用户账号\n`[Username] [Service] [Password] [Allowed IP Address]`\n\n例如,添加一个 用户名为 fuckGfw，密码为fuckGfwDaddy的vpn账号，可以创建多个，一行一个用户。\n`fuckGfw pptpd fuckGfwDaddy *`\n\n同样，输入完成后按ctrl+x键（退出编辑器）会询问是否保存，点击Y，回车。\n\n6. 重启pptpd\n`sudo /etc/init.d/pptpd restart`\n\n7. 编辑系统设置\n`sudo nano /etc/sysctl.conf`\n找到`#net.ipv4.ip_forward=1`\n去掉前面的#，改完后为`net.ipv4.ip_forward=1`\n\n同样，输入完成后按ctrl+x键（退出编辑器）会询问是否保存，点击Y，回车。\n\n8. 重新加载系统设置\n`sudo sysctl -p`\n\n9. 修改ufw防火墙设置\n`sudo nano /etc/default/ufw`\n\n将\n`DEFAULT_FORWARD_POLICY = \"DROP\"`\n改为\n`DEFAULT_FORWARD_POLICY = \"ACCEPT\"`\n\n同样，输入完成后按ctrl+x键（退出编辑器）会询问是否保存，点击Y，回车。\n\n10. 继续修改ufw防火墙设置\n`sudo nano /etc/ufw/before.rules`\n\n会打开文本编辑，在文本最开始处复制添加如下内容，不要做任何修改，\n\n``` bash\n# NAT table rules\n*nat\n\n:POSTROUTING ACCEPT [0:0]\n# Allow forward traffic to eth0\n-A POSTROUTING -s 10.99.99.0/24 -o eth0 -j MASQUERADE\n\n# Process the NAT table rules\nCOMMIT\n```\n\n11. 重启防火墙\n`sudo ufw disable && sudo ufw enable`\n\n恭喜你！！你的VPN服务器架设成功了！！你现在可以随便(fan)浪(qiang)了 =）。\n\n___\n\n**更新：这里可能有的朋友会看到一条Error信息：**\n`>ERROR: problem running ufw-init`\n\n如果出现这个情况，在你确保没输入错误的命令时，请输入一下命令：\n`ufw --force enable`\n","slug":"2014-11-18-VPS-config","published":1,"date":"2015-12-02T22:59:23.000Z","updated":"2015-11-29T22:44:36.000Z","comments":1,"photos":[],"link":"","_id":"cihph4zyq0000t9s19ppl5vkz","sticky":0},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2015-12-02T20:30:27.000Z","updated":"2015-12-02T20:30:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cihph4zzc000at9s12m0at3dv","sticky":0},{"layout":"post","title":"EMBL Course Note","_content":"\n\n<!-- MarkdownTOC -->\n\n- 04112015\n    - Unix Shell\n- 05112015\n    - part one: python\n    - part two: git\n    - part three: numpy and pandas\n- 06112015\n    - Part one: Python unit test\n    - Part two: clusters\n    - Part Three: web development\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"None\"></a>\n# 04112015\n\n<a name=\"None\"></a>\n## Unix Shell\n\n1. Useful command on file and dir\n\n``` bash\n# return the name of the user\nwhoami\n\n# print current working directory\npwd\n\n# change diretory\ncd\n# ./ stands for current directory\n# ../ one level up\n# just cd take you to the root, equal to cd ~ or cd HOME\n\n# list files\n# with -l extended\nls\n\n# unzip zip file\nunzip\n\n# man\nman\n\n#catenate, print whatever in the file\ncat\n\n# first or last 10 line\nhead [-n count]\ntail\n\n# foo --help for help\n\n# make a new directory\nmkdir name\n\n# copy files\ncp [file] [target directory]\n\n# move files\nmv file1 file2 dir/\nmv *.txt dir/\n\n# remove files or dir\n# -i for asking before deleting every file\n# -f force\n# -r recursive\nrm\nrmdir\n\n# to clear\nclear\n```\n\n\n```bash\n# search in file\ngrep [keyword] file\ntouch [filename] # create a new file\nwc -l # word count -line\n```\n___\n\n\n2. pipeline\n\nevery tool is for one function and do that well\n\ncreate new file by `>` (*watch out for overright*)\n`>>` for append\n`|` connect tools to create pipe\n\n`grep -i author *.pdb | grep -i -c woodcock`\n\n3. put them in a script\n\n``` bash\n#!/bin/bash\n'commands goes here'\n# save as foobar.sh, then run with bash\n```\n\n<a name=\"None\"></a>\n# 05112015\n\n<a name=\"None\"></a>\n## part one: python\n\ncreate virtual environment py34\n\n``` bash\nconda create -n py34 python=3.4 anaconda\n\nsource activate py34\n\nipython notebook\n```\n\n``` python\nhelp()\ndir()\n```\n\nglob module\n\n``` python\nimport glob\nfiles = glob.glob('*.txt')\n```\n\nstrip, rstrip, lstrip\n\n``` python\na_string = 'aaabbbaaccaa'\na_string.strip('a')  # gives 'bbbaacc' strip both sides\na_string.rstrip('a')  # gives 'aaabbaacc' strip from right\na_string.lstrip('a')  # gives 'bbaaccaa'  strip from left\n```\n\n____\n\n<a name=\"None\"></a>\n## part two: git\n\n[handout](https://git.embl.de/dinkel/linuxcommandline/raw/software-carpentry/git_beginner/_build/latex/gitintro.pdf)\n\ngood way of storing files with version control (changes, history, restore , conflicts and etc.)\n\n\n### concept\n\n**commit**: a commit is a recorded set of changes in your project's files. Try to group logical sets of changes together into one commit - don't mix changes are unrelated.\n\n**repository**: a history of all commits\n\nworking dir -- stage -- repo\n\n\n### config and command\n\n``` bash\n# can be set per project\ngit config --global user.name \"name\"\ngit config --global user.email \"email@g.com\"\ngit config --global core.editor nano\ngit config --global merge.tool kdiff3\n\ngit config --list\n```\n\ncreate local server in repos at local root, then clong into working repo\n\n``` bash\ngit init --bare\n```\n\n- work flow\n\n``` bash\ngit add\ngit commit\ngit status\ngit commit --amend\ngit push\n```\n\n- deal with conflict\nwhen push, git will tell if there is any conflicts\n\nif found, deal with the specific conflicts, then add, commit and push again\n\n- revert to history version\n\n``` bash\ngit log\ngit checkout <hash> [filename]\n```\n\n- branch\n\n``` bash\ngit branch [new branch name]\ngit branch -a  # show all the branches\ngit checkout [branch name]\n\n# merge master into feature than fastforward (merge back)\ngit merge\ngit branch -d [branch name]\ngit push -u origin [branch name] # push local branch to remote\n```\n\n____\n\n<a name=\"None\"></a>\n## part three: numpy and pandas\n[toby email](tobyhodge@embl.de)\n\n### arrays\n\n- basic\n\n``` python\nimport numpy as np\n\nmyArray = np.array(range(10))\n\n# filter\nmyArray[myArray>7]\nmyArray == 3\nmyArray[myArray.nonzero()]\n\n# calculation on each element\nmyArray / 2\n\n# calculation of array\nmyArray.sum()\nmyArray.mean()\nmyArray.cumsum()\nmyArray.var()\n```\n\n- multidimension\n\n``` python\n# multi-dimension\nmyMultiArray = np.array([range(i, i+3) for i in range(5)])\nmyMultiArray.shape\n\n# transpose\nmyMultiArray.tranpose()\nmyMultiArray.T\n\n# flatten\nmyMultiArray.flatten()\n\n# reshape\nmyMultiArray.reshape(3, 5)\n\n#dot *\narrayA * arrayB\narrayA.dot(arrayB)\n```\n\n- create array\n\n``` python\n# create array of ones or zeros for initialization\narrayOfOne = np.ones((2,2,2))\narrayOfZeros = np.zeros((2,5))\n\n# array of range\nrangeArray = np.arange(10)\n\n# spaced array\nstartPoint = 5\nendPoint = 30\nnumOfElement = 5\nsapcedArray = np.linspace(startPoint, endPoint, numOfElement)\n\n# create array from file\narrayFromFile = np.fromfile(filename, dtype, sep)\n```\n\n### matplot\n\nfor ipython `%matplotlib inline`\n\n``` python\nfrom matplotlib import pyplot as plt\nintervals = np.linspace(0, 2*np.pi, 101)\nplt.plot(intervals, np.sin(intervals))\nplt.plot(intervals, np.cos(intervals))\nplt.show()\n\nplt.subplot(2,2,1) # or plt.subplot(221)\n```\n\n<a name=\"None\"></a>\n# 06112015\n\n<a name=\"None\"></a>\n## Part one: Python unit test\n\n### assertion\n\n```python\nassert()\n\n```\n\n### SOME CONCEPTS AND NOMENCLATURE\n- **pre-conditions** What must be true *before* calling a function.\n- **post-conditions** What will be true *after* calling a function.\n- **invariants** What the function *does not* change.\n\n### Test\n\n#### Using nosetests\n(doc of nosetests)[https://nose.readthedocs.org/en/latest/]\n\n``` python\ndef add_double(x, y):\n    '''Returns the double of the sum of its inputs'''\n    return 2. * (x + y)\n\ndef test_smoke():\n    assert add_double(1, 1) == 4\n```\n\nNow, run on the *Terminal*: `nosetest -v [scriptname]`\n\n1. Type of cases\n    - moke test just check it runs (smoke test)\n    - Case testing test a \"known case\" (like a control in the wet lab)\n    - Corner/edge cases check \"complex\" cases.\n    - Regression testing create a test when you find a bug.\n    - Integration test test that different parts work together.\n\n2. TESTING PHILOSOPHIES\n    - **test driven development** Write tests first (All code is guilty until proven innocent)\n    - Test everything. Test it twice\n    - To test all the codes are covered by tests: [coveralls](https://coveralls.io/)\n    - Continuous integration\n    - Regression testing only\n    - Ad-hoc testing\n\n3. WRITING TESTABLE CODE\n    - Using testing makes your code look different\n    (Mostly better, but also just different)\n    - Split data-loading/computation/plotting (hard to test plotting)\n\n<a name=\"None\"></a>\n## Part two: clusters\n\nSGE system\n\n### USING AN INTERACTIVE SESSION\nCreate a file in your home directory:\n`echo \"Hello World\" > file.txt`\nAllocate a node for computation:\n`qrsh`\n\n(On LSF, we would use `bsub -Is /bin/bash`)\nWe now depend on the cluster being free(ish).\nVerify that your file is there. Create a new one.\nExit and verify that your new file is also there.\n\n### RUNNING OUR FIRST JOB ON THE QUEUE\n(1) Create a file called script.sh with the following content:\n\n```bash\n#!/bin/bash\n\necho $HOSTNAME\necho \"My job ran\"\n```\n\n(2) Make it executable:\n`chmod +x script.sh`\n\n(3) Submit it:\n`qsub ./script.sh`\n\n<a name=\"None\"></a>\n## Part Three: web development\n\nflask\n","source":"_posts/2015-11-7-EBML-Note.markdown","raw":"---\nlayout: post\ntitle:  \"EMBL Course Note\"\ntags: [programming, git, python, linux]\ncategories: programming\n---\n\n\n<!-- MarkdownTOC -->\n\n- 04112015\n    - Unix Shell\n- 05112015\n    - part one: python\n    - part two: git\n    - part three: numpy and pandas\n- 06112015\n    - Part one: Python unit test\n    - Part two: clusters\n    - Part Three: web development\n\n<!-- /MarkdownTOC -->\n\n\n<a name=\"None\"></a>\n# 04112015\n\n<a name=\"None\"></a>\n## Unix Shell\n\n1. Useful command on file and dir\n\n``` bash\n# return the name of the user\nwhoami\n\n# print current working directory\npwd\n\n# change diretory\ncd\n# ./ stands for current directory\n# ../ one level up\n# just cd take you to the root, equal to cd ~ or cd HOME\n\n# list files\n# with -l extended\nls\n\n# unzip zip file\nunzip\n\n# man\nman\n\n#catenate, print whatever in the file\ncat\n\n# first or last 10 line\nhead [-n count]\ntail\n\n# foo --help for help\n\n# make a new directory\nmkdir name\n\n# copy files\ncp [file] [target directory]\n\n# move files\nmv file1 file2 dir/\nmv *.txt dir/\n\n# remove files or dir\n# -i for asking before deleting every file\n# -f force\n# -r recursive\nrm\nrmdir\n\n# to clear\nclear\n```\n\n\n```bash\n# search in file\ngrep [keyword] file\ntouch [filename] # create a new file\nwc -l # word count -line\n```\n___\n\n\n2. pipeline\n\nevery tool is for one function and do that well\n\ncreate new file by `>` (*watch out for overright*)\n`>>` for append\n`|` connect tools to create pipe\n\n`grep -i author *.pdb | grep -i -c woodcock`\n\n3. put them in a script\n\n``` bash\n#!/bin/bash\n'commands goes here'\n# save as foobar.sh, then run with bash\n```\n\n<a name=\"None\"></a>\n# 05112015\n\n<a name=\"None\"></a>\n## part one: python\n\ncreate virtual environment py34\n\n``` bash\nconda create -n py34 python=3.4 anaconda\n\nsource activate py34\n\nipython notebook\n```\n\n``` python\nhelp()\ndir()\n```\n\nglob module\n\n``` python\nimport glob\nfiles = glob.glob('*.txt')\n```\n\nstrip, rstrip, lstrip\n\n``` python\na_string = 'aaabbbaaccaa'\na_string.strip('a')  # gives 'bbbaacc' strip both sides\na_string.rstrip('a')  # gives 'aaabbaacc' strip from right\na_string.lstrip('a')  # gives 'bbaaccaa'  strip from left\n```\n\n____\n\n<a name=\"None\"></a>\n## part two: git\n\n[handout](https://git.embl.de/dinkel/linuxcommandline/raw/software-carpentry/git_beginner/_build/latex/gitintro.pdf)\n\ngood way of storing files with version control (changes, history, restore , conflicts and etc.)\n\n\n### concept\n\n**commit**: a commit is a recorded set of changes in your project's files. Try to group logical sets of changes together into one commit - don't mix changes are unrelated.\n\n**repository**: a history of all commits\n\nworking dir -- stage -- repo\n\n\n### config and command\n\n``` bash\n# can be set per project\ngit config --global user.name \"name\"\ngit config --global user.email \"email@g.com\"\ngit config --global core.editor nano\ngit config --global merge.tool kdiff3\n\ngit config --list\n```\n\ncreate local server in repos at local root, then clong into working repo\n\n``` bash\ngit init --bare\n```\n\n- work flow\n\n``` bash\ngit add\ngit commit\ngit status\ngit commit --amend\ngit push\n```\n\n- deal with conflict\nwhen push, git will tell if there is any conflicts\n\nif found, deal with the specific conflicts, then add, commit and push again\n\n- revert to history version\n\n``` bash\ngit log\ngit checkout <hash> [filename]\n```\n\n- branch\n\n``` bash\ngit branch [new branch name]\ngit branch -a  # show all the branches\ngit checkout [branch name]\n\n# merge master into feature than fastforward (merge back)\ngit merge\ngit branch -d [branch name]\ngit push -u origin [branch name] # push local branch to remote\n```\n\n____\n\n<a name=\"None\"></a>\n## part three: numpy and pandas\n[toby email](tobyhodge@embl.de)\n\n### arrays\n\n- basic\n\n``` python\nimport numpy as np\n\nmyArray = np.array(range(10))\n\n# filter\nmyArray[myArray>7]\nmyArray == 3\nmyArray[myArray.nonzero()]\n\n# calculation on each element\nmyArray / 2\n\n# calculation of array\nmyArray.sum()\nmyArray.mean()\nmyArray.cumsum()\nmyArray.var()\n```\n\n- multidimension\n\n``` python\n# multi-dimension\nmyMultiArray = np.array([range(i, i+3) for i in range(5)])\nmyMultiArray.shape\n\n# transpose\nmyMultiArray.tranpose()\nmyMultiArray.T\n\n# flatten\nmyMultiArray.flatten()\n\n# reshape\nmyMultiArray.reshape(3, 5)\n\n#dot *\narrayA * arrayB\narrayA.dot(arrayB)\n```\n\n- create array\n\n``` python\n# create array of ones or zeros for initialization\narrayOfOne = np.ones((2,2,2))\narrayOfZeros = np.zeros((2,5))\n\n# array of range\nrangeArray = np.arange(10)\n\n# spaced array\nstartPoint = 5\nendPoint = 30\nnumOfElement = 5\nsapcedArray = np.linspace(startPoint, endPoint, numOfElement)\n\n# create array from file\narrayFromFile = np.fromfile(filename, dtype, sep)\n```\n\n### matplot\n\nfor ipython `%matplotlib inline`\n\n``` python\nfrom matplotlib import pyplot as plt\nintervals = np.linspace(0, 2*np.pi, 101)\nplt.plot(intervals, np.sin(intervals))\nplt.plot(intervals, np.cos(intervals))\nplt.show()\n\nplt.subplot(2,2,1) # or plt.subplot(221)\n```\n\n<a name=\"None\"></a>\n# 06112015\n\n<a name=\"None\"></a>\n## Part one: Python unit test\n\n### assertion\n\n```python\nassert()\n\n```\n\n### SOME CONCEPTS AND NOMENCLATURE\n- **pre-conditions** What must be true *before* calling a function.\n- **post-conditions** What will be true *after* calling a function.\n- **invariants** What the function *does not* change.\n\n### Test\n\n#### Using nosetests\n(doc of nosetests)[https://nose.readthedocs.org/en/latest/]\n\n``` python\ndef add_double(x, y):\n    '''Returns the double of the sum of its inputs'''\n    return 2. * (x + y)\n\ndef test_smoke():\n    assert add_double(1, 1) == 4\n```\n\nNow, run on the *Terminal*: `nosetest -v [scriptname]`\n\n1. Type of cases\n    - moke test just check it runs (smoke test)\n    - Case testing test a \"known case\" (like a control in the wet lab)\n    - Corner/edge cases check \"complex\" cases.\n    - Regression testing create a test when you find a bug.\n    - Integration test test that different parts work together.\n\n2. TESTING PHILOSOPHIES\n    - **test driven development** Write tests first (All code is guilty until proven innocent)\n    - Test everything. Test it twice\n    - To test all the codes are covered by tests: [coveralls](https://coveralls.io/)\n    - Continuous integration\n    - Regression testing only\n    - Ad-hoc testing\n\n3. WRITING TESTABLE CODE\n    - Using testing makes your code look different\n    (Mostly better, but also just different)\n    - Split data-loading/computation/plotting (hard to test plotting)\n\n<a name=\"None\"></a>\n## Part two: clusters\n\nSGE system\n\n### USING AN INTERACTIVE SESSION\nCreate a file in your home directory:\n`echo \"Hello World\" > file.txt`\nAllocate a node for computation:\n`qrsh`\n\n(On LSF, we would use `bsub -Is /bin/bash`)\nWe now depend on the cluster being free(ish).\nVerify that your file is there. Create a new one.\nExit and verify that your new file is also there.\n\n### RUNNING OUR FIRST JOB ON THE QUEUE\n(1) Create a file called script.sh with the following content:\n\n```bash\n#!/bin/bash\n\necho $HOSTNAME\necho \"My job ran\"\n```\n\n(2) Make it executable:\n`chmod +x script.sh`\n\n(3) Submit it:\n`qsub ./script.sh`\n\n<a name=\"None\"></a>\n## Part Three: web development\n\nflask\n","slug":"2015-11-7-EBML-Note","published":1,"date":"2015-12-02T22:59:00.000Z","updated":"2015-11-22T21:45:21.000Z","comments":1,"photos":[],"link":"","_id":"cihph4zzf000bt9s19fko8l87","sticky":0},{"layout":"post","title":"Shell Config -- Part One: Windows","modified":null,"description":"console customization on Win","image":{"feature":null,"credit":null,"creditlink":null},"comments":1,"share":true,"_content":"\nShell is so powerful and quick. One could accomplish many tasks with pipeline thanks to the philosophy of \\*nux system. Customizing shell environment will for sure increase efficiency, and maybe even make you happier while you are working.\n\nThis will be a series of articles about configuration on Win, mac and Linux platform. The goal is to have similar interface of the shell and similar good and informative experience. \n\nPart One: Windows\n====\n\n## Choose a console emulator\nI recommend *[cmder](http://cmder.net/)* for win platform, which can be used not only for **cmd** and **powershell**, but also can be used for installed linux shell like minGW, CygWin, zsh or git bash.\n\n\n### cmd and Powershell\nIt is said that **cmd** was not a proper shell at all, while **Powershell** looks like product from the future generation powerful (talking about calling office api and vba) but not really popular. \n\nAnyway, if just for cmd or powershell, it is fairly easy to quickly start with *cmder* and customize color, font and keys.\n\n___\n\n## use bash/zsh/minGW/CygWin\nAnother advantages for *cmder* is that it is super easy to use other shell environment in the emulator. In fact, it will auto collect all the installed shell and add to available option.\n\nAmong those shells, I chose zsh for customizations. Additionally, it is good to use the same shell and config on different platforms. \n\n___\n\n## zsh\nAsking google about zsh on Windows, [Babun](http://babun.github.io/) quickly stands out. \n\n### Battery included\n\nBased on CygWin, it comes with useful bash command and python as well as a simple package distribute system `pact`. And of course, it is compatible with [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh).\n\n### configuration for cmder\n\nThe configuration can be manually added to cmder as follows:\n   \n1. Go to Settings>Startup>Tasks ==> Create a new task\n2. Task parameters: `/icon \"%userprofile%\\.babun\\cygwin\\bin\\mintty.exe\" /dir \"%userprofile%\"`\n    \n    Commands: `%userprofile%\\.babun\\cygwin\\bin\\mintty.exe`\n3. Babun is available in the \"Create new console\" menu.\n\n### Choose theme\nedit .zshrc file: `vim ~/.zshrc`\n\nthen `ZSH_THEME=\"agnoster\"`\n\n### configure powerline font\nget powerline compatible font from [git repo](https://github.com/powerline/fonts), install font as usually by opening .ttf file and clicking install\n\nthen choose the installed font in menu of babun shell to display proper powerline symbol.\n\n### other config\n- git config\n- ruby: `pact install ruby`; use with .bat, e.g. `gem.bat install bundle`\n\n   \n\n","source":"_posts/2015-11-23-shell-config-windows.markdown","raw":"---\nlayout: post\ntitle: \"Shell Config -- Part One: Windows\"\nmodified:\ncategories: resources\ndescription: console customization on Win\ntags: [shell config]\nimage:\n  feature:\n  credit:\n  creditlink:\ncomments: true\nshare: true\n---\n\nShell is so powerful and quick. One could accomplish many tasks with pipeline thanks to the philosophy of \\*nux system. Customizing shell environment will for sure increase efficiency, and maybe even make you happier while you are working.\n\nThis will be a series of articles about configuration on Win, mac and Linux platform. The goal is to have similar interface of the shell and similar good and informative experience. \n\nPart One: Windows\n====\n\n## Choose a console emulator\nI recommend *[cmder](http://cmder.net/)* for win platform, which can be used not only for **cmd** and **powershell**, but also can be used for installed linux shell like minGW, CygWin, zsh or git bash.\n\n\n### cmd and Powershell\nIt is said that **cmd** was not a proper shell at all, while **Powershell** looks like product from the future generation powerful (talking about calling office api and vba) but not really popular. \n\nAnyway, if just for cmd or powershell, it is fairly easy to quickly start with *cmder* and customize color, font and keys.\n\n___\n\n## use bash/zsh/minGW/CygWin\nAnother advantages for *cmder* is that it is super easy to use other shell environment in the emulator. In fact, it will auto collect all the installed shell and add to available option.\n\nAmong those shells, I chose zsh for customizations. Additionally, it is good to use the same shell and config on different platforms. \n\n___\n\n## zsh\nAsking google about zsh on Windows, [Babun](http://babun.github.io/) quickly stands out. \n\n### Battery included\n\nBased on CygWin, it comes with useful bash command and python as well as a simple package distribute system `pact`. And of course, it is compatible with [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh).\n\n### configuration for cmder\n\nThe configuration can be manually added to cmder as follows:\n   \n1. Go to Settings>Startup>Tasks ==> Create a new task\n2. Task parameters: `/icon \"%userprofile%\\.babun\\cygwin\\bin\\mintty.exe\" /dir \"%userprofile%\"`\n    \n    Commands: `%userprofile%\\.babun\\cygwin\\bin\\mintty.exe`\n3. Babun is available in the \"Create new console\" menu.\n\n### Choose theme\nedit .zshrc file: `vim ~/.zshrc`\n\nthen `ZSH_THEME=\"agnoster\"`\n\n### configure powerline font\nget powerline compatible font from [git repo](https://github.com/powerline/fonts), install font as usually by opening .ttf file and clicking install\n\nthen choose the installed font in menu of babun shell to display proper powerline symbol.\n\n### other config\n- git config\n- ruby: `pact install ruby`; use with .bat, e.g. `gem.bat install bundle`\n\n   \n\n","slug":"2015-11-23-shell-config-windows","published":1,"date":"2015-12-02T22:59:23.000Z","updated":"2015-11-29T22:44:36.000Z","photos":[],"link":"","_id":"cihph4zzm000lt9s1o256xyw8","sticky":0},{"layout":"post","title":"Django Basic","_content":"\n\n<!-- Django Basics\n===== -->\n\n## preparation\n\n``` bash\nmkdir project\ncd project\n\nvirtualenv venv\nsource venv/bin/activate\n```\n\n## create project\n```bash\ndjango-admin.py startproject mysite\n\ntree mysite\n```\n\nproject structure:\n\n```\nmysite/\n├── mysite\n│   ├── __init__.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── manage.py\n```\n\n## basic commands\n\n`python manage.py <command> [options]`\n\n### create django application (app)\n\n`python manage.py startapp appname`\n\n```\nappname\n├── __init__.py\n├── admin.py\n├── migrations\n├── models.py\n├── tests.py\n└── views.py\n```\n\nThen edit mysite/settings.py, add entry in **INSTALLED_APPS**\n\n### views and URLconfs\n\n![About MVC](/images/djangoBasic_url-dispatch.png)\n","source":"_posts/2015-11-18-django-basic.markdown","raw":"---\nlayout: post\ntitle:  \"Django Basic\"\ntags: [python, django, web]\ncategories: programming\n---\n\n\n<!-- Django Basics\n===== -->\n\n## preparation\n\n``` bash\nmkdir project\ncd project\n\nvirtualenv venv\nsource venv/bin/activate\n```\n\n## create project\n```bash\ndjango-admin.py startproject mysite\n\ntree mysite\n```\n\nproject structure:\n\n```\nmysite/\n├── mysite\n│   ├── __init__.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── manage.py\n```\n\n## basic commands\n\n`python manage.py <command> [options]`\n\n### create django application (app)\n\n`python manage.py startapp appname`\n\n```\nappname\n├── __init__.py\n├── admin.py\n├── migrations\n├── models.py\n├── tests.py\n└── views.py\n```\n\nThen edit mysite/settings.py, add entry in **INSTALLED_APPS**\n\n### views and URLconfs\n\n![About MVC](/images/djangoBasic_url-dispatch.png)\n","slug":"2015-11-18-django-basic","published":1,"date":"2015-12-02T23:52:10.000Z","updated":"2015-12-02T23:52:10.000Z","comments":1,"photos":[],"link":"","_id":"cihph4zzz000qt9s12lfrrtr6","sticky":0},{"layout":"post","title":"Hello World","_content":"\nHello world\n====\n\n# This is the first blog\n\nto test:\n\n- github pages\n- markdown\n- jekyll\n\n``` python\n# python code to test markdown code highlight\ndef test(test_case=True):\n    for i in range(10):\n        print \"hello\"\n    pass\n```\n","source":"_posts/2015-11-17-hello-world.markdown","raw":"---\nlayout: post\ntitle:  \"Hello World\"\ncategories: others\ntags: [test]\n---\n\nHello world\n====\n\n# This is the first blog\n\nto test:\n\n- github pages\n- markdown\n- jekyll\n\n``` python\n# python code to test markdown code highlight\ndef test(test_case=True):\n    for i in range(10):\n        print \"hello\"\n    pass\n```\n","slug":"2015-11-17-hello-world","published":1,"date":"2015-12-02T21:03:41.000Z","updated":"2015-11-22T21:44:30.000Z","comments":1,"photos":[],"link":"","_id":"cihph5003000xt9s1dkwdnb1c","sticky":0},{"layout":"post","title":"HaCaT Cells Protocol","_content":"\nHaCaT cells\n====\n\n*from Jose P0 & Gaia P5*\n\nSpontaneously transformed aneuploid immortal keratinocyte cell line from adult human skin\n[paper](/images/HaCaT_Boucamp_1988_ger.pdf)\n\n## Media\nIt can be kept in normal 10% DMEM, 5% CO2. However, it is better to kept them in low calcium condition where they are no longer able to differentiate to corneocyte so that the population is maintained and transfection is easier.\n\nThe table below gives you the idea that how much calcium in Media\n\n| Name | Calcium concentration   |\n| ------ | --------------------- |\n| plain DMEM | ~ 1.9 mM          |\n| FBS        | ~ 3 mM            |\n| 10% DMEM   | ~ 2.2 mM          |\n| low Calcium recipe  | 0.03 mM  |\n| high Calcium recipe | 2.8 mM   |\n\nThe low calcium media recipe is below:\n\n|    Item    |   concentration   |\n| ---------- | ----------------- |\n| Minimal DMEM (-calcium) |      |\n| 3.0 mM CaCl2 in H2O     | 1:100|\n| L-Glutamin              | 1:100|\n| Sodium Pyruvate         | 1:100|\n| Pen/Strep (antibiotic)  | 1:100|\n| FBS (-calcium)          | 10%  |\n\n### protocol to remove calcium in FBS:\nfor **50 ml** FBS, add **0.38g** chelex-100 rexin [Bio-Rad 142-2832](http://www.bio-rad.com/en-uk/product/chelex-100-resin)\nrotate 1 hour @ 4 degree\nfilter before use (to remove chelex)\n\n## Grow Monolayer\nIt is straightforward to grow monolayer. For my case, I want them to grow into monolayer after my 72 hour transfection. I seed 5000 cells in one well of 96 well-plate, transfecting them the next day. Then I will have good monolayer by the end of experiment.\n","source":"_posts/2015-11-16-hacat-cells-protocol.markdown","raw":"---\nlayout: post\ntitle:  \"HaCaT Cells Protocol\"\ntags: [tissue culture, method]\ncategories: research\n---\n\nHaCaT cells\n====\n\n*from Jose P0 & Gaia P5*\n\nSpontaneously transformed aneuploid immortal keratinocyte cell line from adult human skin\n[paper](/images/HaCaT_Boucamp_1988_ger.pdf)\n\n## Media\nIt can be kept in normal 10% DMEM, 5% CO2. However, it is better to kept them in low calcium condition where they are no longer able to differentiate to corneocyte so that the population is maintained and transfection is easier.\n\nThe table below gives you the idea that how much calcium in Media\n\n| Name | Calcium concentration   |\n| ------ | --------------------- |\n| plain DMEM | ~ 1.9 mM          |\n| FBS        | ~ 3 mM            |\n| 10% DMEM   | ~ 2.2 mM          |\n| low Calcium recipe  | 0.03 mM  |\n| high Calcium recipe | 2.8 mM   |\n\nThe low calcium media recipe is below:\n\n|    Item    |   concentration   |\n| ---------- | ----------------- |\n| Minimal DMEM (-calcium) |      |\n| 3.0 mM CaCl2 in H2O     | 1:100|\n| L-Glutamin              | 1:100|\n| Sodium Pyruvate         | 1:100|\n| Pen/Strep (antibiotic)  | 1:100|\n| FBS (-calcium)          | 10%  |\n\n### protocol to remove calcium in FBS:\nfor **50 ml** FBS, add **0.38g** chelex-100 rexin [Bio-Rad 142-2832](http://www.bio-rad.com/en-uk/product/chelex-100-resin)\nrotate 1 hour @ 4 degree\nfilter before use (to remove chelex)\n\n## Grow Monolayer\nIt is straightforward to grow monolayer. For my case, I want them to grow into monolayer after my 72 hour transfection. I seed 5000 cells in one well of 96 well-plate, transfecting them the next day. Then I will have good monolayer by the end of experiment.\n","slug":"2015-11-16-hacat-cells-protocol","published":1,"date":"2015-12-02T23:52:01.000Z","updated":"2015-12-02T23:52:01.000Z","comments":1,"photos":[],"link":"","_id":"cihph50060012t9s1m0i1gf90","sticky":0},{"layout":"post","title":"Django Blog Tutorial","_content":"\nDjango Blog Tutorial - the Next Generation - Part 1\n====\n\n[original link](http://matthewdaly.co.uk/blog/2013/12/28/django-blog-tutorial-the-next-generation-part-1/)\n\n*edited with new django version*\n[github](https://github.com/4everer/django_test)\n\nThis series will cover exactly the same basic idea of using Django to build a blogging engine, but will expand on what the original series did in many ways. We will cover such additional topics as:\n\n- Using Twitter Bootstrap to make your blog look good without too much hassle\n- Using Virtualenv to sandbox your blog application\n- ~~Using South to effectively manage changes to your database structure~~\n    **use `python manage.py migrate` and `python manage.py makemigrations`**\n- Writing some simple unit tests\n- Deploying the finished application to Heroku\n\nReady? Let’s get started!\n\n\\*unix system\npython 2.7\n\n**prerequests**:\n\n- Virtualenv\n- Pip\n- Git\n- psql\n\n## Beginning work\nWith all that done, we’re ready to get started. Create a folder in a suitable place on your file system and switch into it. I generally keep a dedicated folder in my home directory called Projects to use for all of my projects, and give each project a folder within it - in this case the project is called django_tutorial_blog_ng.\n\nNow, we’ll use Git to keep track of our source code. If you prefer Mercurial, feel free to use that, but this tutorial will assume use of Git, so you’ll want to adapt the commands used accordingly. Start tracking your project with the following command from the shell, when you’re in the project directory:\n\n``` bash\n$ git init\n$ virtualenv venv --distribute\n$ source venv/bin/activate\n$ pip install django-toolbelt\n```\nOnce the installation finish,\n`$ pip freeze > requirements.txt`\n\nNext, we’ll commit these changes with Git:\n\n```bash\n$ git add requirements.txt\n$ git commit -m 'Committed requirements'\n```\n\nNext we’ll add a .gitignore file to ignore our virtualenv - we want to keep this out of version control because it’s something specific to that install. We have all we need to recreate it so we don’t want to store it. In addition, we also want to ignore any compiled Python files (identifiable by the .pyc suffix):\nadd and edit .gitignore file\n>\nvenv/\n*.pyc\n\n\nLet’s commit that too:\n\n``` bash\n$ git add .gitignore\n$ git commit -m 'Added a gitignore file'\n```\n\nNow, let’s generate our project’s basic skeleton:\n```bash\n$ django-admin.py startproject django_tutorial_blog_ng .\n```\n\nThis application skeleton includes a basic configuration which will be sufficient for now, but you will also want to add the SQLite database file to your .gitignore:\n>\nenv/\n*.pyc\ndb.sqlite3\n\nLet’s commit what we’ve done:\n```bash\n$ git add .gitignore django_tutorial_blog_ng/manage.py\n$ git commit -m 'Created project skeleton'\n```\n\nNow, you can create your database. Run the following command:\n\n```bash\n$ python manage.py migrate\n$ python manage.py syncdb\n```\n\nYou’ll be prompted to create a superuser - go ahead and fill in the details. Now, run the following command:\n\n```bash\n$ python manage.py runserver\n```\n\nThis will run Django’s built-in web server on port 8000, and if you click [here](127.0.0.1:8000), you should see a page congratulating you on your first Django-powered page. Once you’re finished with it, you can stop the web server with Ctrl-C.\n\n\n## Your first app\nDjango distinguishes between the concepts of projects and apps. A project is a specific project that may consist of one or more apps, such as a web app, whereas an app is a set of functionality within a project. For instance, one website might include some flat pages, an admin interface, and a blogging engine, and these could easily be different apps. By encouraging you to separate different types of functionality into different apps, Django makes it easier for you to reuse existing content elsewhere.\n\nWe’re going to create our first app, which is the blogging engine. Run the following command to create a basic skeleton for this app:\n\n```bash\n$ python manage.py startapp blogengine\n```\n\n## An introduction to MVC\n![About MVC](/images/djangoBasic_url-dispatch.png)\n\nMVC is a common pattern used in web development. Many web development frameworks can be loosely described as MVC, including Django, Rails, CodeIgniter, Laravel and Symfony, as well as some client-side frameworks like Backbone.js. The basic concept is that a web app is divided into three basic components:\n\n- Models: the data managed with the application\n- Views: the presentation of the data\n- Controllers: an intermediary between the models and the views\n\nNow, Django’s interpretation of MVC is slightly different to many other frameworks. While in most frameworks the views are HTML templates for rendering the data, in Django this role is taken by the templates, and the views are functions or objects that render data from the models using a template. Effectively, you can think of Django’s views as being like controllers in other frameworks, and Django templates as being views.\n\nIn Django, you create your models as Python classes that represent your data, and you use the Django ORM to query the database. As a result, it’s rare to have to directly query your database using SQL, making it more portable between different databases.\n\nNow, our first model is going to be of a blog post. At least initially, each post will have the following attributes:\n>\nA title\nA publication date and time\nSome text\n\nNow, we could just jump straight into creating our first model, but we’re going to make a point of following the practices of test-driven development here. The basic concept of TDD is that you write a failing test before writing any code, then you write the code to pass that test afterwards. It does make things a bit slower, but it’s all too easy to neglect writing tests at all if you leave it till later.\n\nIf you take a look in the **blogengine** folder you’ll notice there’s a file called **tests.py**.\n\nIt’s worth taking a little time to plan out what we want to test from our post model. Each post object will have the attributes I mentioned above, and what we want to be able to do is test that we can:\n\n- Set the title\n- Set the publication date and time\n- Set the text\n- Save it successfully\n- Retrieve it successfully\n\n``` python\n# test.py\nfrom django.test import TestCase\nfrom django.utils import timezone\nfrom blogengine.models import Post\n# Create your tests here.\nclass PostTest(TestCase):\n    def test_create_post(self):\n        # Create the post\n        post = Post()\n        # Set the attributes\n        post.title = 'My first post'\n        post.text = 'This is my first blog post'\n        post.pub_date = timezone.now()\n        # Save it\n        post.save()\n        # Check we can find it\n        all_posts = Post.objects.all()\n        self.assertEquals(len(all_posts), 1)\n        only_post = all_posts[0]\n        self.assertEquals(only_post, post)\n        # Check attributes\n        self.assertEquals(only_post.title, 'My first post')\n        self.assertEquals(only_post.text, 'This is my first blog post')\n        self.assertEquals(only_post.pub_date.day, post.pub_date.day)\n        self.assertEquals(only_post.pub_date.month, post.pub_date.month)\n        self.assertEquals(only_post.pub_date.year, post.pub_date.year)\n        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)\n        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)\n        self.assertEquals(only_post.pub_date.second, post.pub_date.second)\n```\n\nthen edit the **model.py**\n\n```python\nfrom django.db import models\n# Create your models here.\n\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    pub_date = models.DateTimeField()\n    text = models.TextField()\n```\n\nfirst do the migraitons for db\n```bash\npython manage.py makemigrations\npython manage.py migrate\n```\n\nrun the test\n`python managy.py test`\n\nwe can use\n`python manage.py sqlmigrate blogengine 0001`\nto see the migrations\n\n*The `sqlmigrate` command takes migration names and returns their SQL*\n\nrun `python manage.py check` to check before making any migrations\n\n## Creating blog posts via the admin\n\nNow, we need a way to be able to create, edit and delete blog posts. Django’s admin interface allows us to do so easily. However, before we do so, we want to create automated acceptance tests for this functionality, in order to test the ability to create posts from an end-user’s perspective. While unit tests are for testing sections of an application’s functionality from the perspective of other sections of the application, acceptance tests are testing from the user’s perspective. In other words, they test what the application needs to do to be acceptable.\n\nFirst, we will test logging into the admin.\n\nNow, you could put your own credentials in there, but that’s not a good idea because it’s a security risk. Instead, we’ll create a fixture for the test user that will be loaded when the tests are run. Run the following command:\n```bash\n$ python manage.py createsuperuser\n```\n\nGive the username as bobsmith, the email address as bob@example.com, and the password as password. Once that’s done, run these commands to dump the existing users to a fixture:\n```bash\n$ mkdir blogengine/fixtures\n$ python manage.py dumpdata auth.User --indent=2 > blogengine/fixtures/users.json\n```\n\nThis will dump all of the existing users to blogengine/fixtures/users.json. You may wish to edit this file to remove your own superuser account and leave only the newly created one in there.\n\nFirst of all, we import two new objects from `django.test`, `LiveServerTestCase` and `Client`. Then we create the first part of our first test for the admin, named `AdminTest`. Eventually, this will test that we can log successfully into the admin interface. For now, we’re just doing the following:\n\n    - Creating a Client object\n    - Fetching the /admin/ route\n    - Asserting that the status code for this HTTP request is 200, (in other words, that the page was fetched successfully).\n\n``` python\nfrom django.test import TestCase, LiveServerTestCase, Client\nfrom django.utils import timezone\nfrom blogengine.models import Post\n# Create your tests here.\n\n\nclass PostTest(TestCase):\n    def test_create_post(self):\n        # Create the post\n        post = Post()\n        # Set the attributes\n        post.title = 'My first post'\n        post.text = 'This is my first blog post'\n        post.pub_date = timezone.now()\n        # Save it\n        post.save()\n        # Check we can find it\n        all_posts = Post.objects.all()\n        self.assertEquals(len(all_posts), 1)\n        only_post = all_posts[0]\n        self.assertEquals(only_post, post)\n        # Check attributes\n        self.assertEquals(only_post.title, 'My first post')\n        self.assertEquals(only_post.text, 'This is my first blog post')\n        self.assertEquals(only_post.pub_date.day, post.pub_date.day)\n        self.assertEquals(only_post.pub_date.month, post.pub_date.month)\n        self.assertEquals(only_post.pub_date.year, post.pub_date.year)\n        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)\n        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)\n        self.assertEquals(only_post.pub_date.second, post.pub_date.second)\n\n\nclass AdminTest(LiveServerTestCase):\n    fixtures = ['users.json']\n    def test_login(self):\n        # Create client\n        c = Client()\n        # Get login page\n        response = c.get('/admin/')\n        # Check response code\n        self.assertEquals(response.status_code, 200)\n        # Check 'Log in' in response\n        self.assertTrue('Log in' in response.content)\n        # Log the user in\n        c.login(username='bobsmith', password=\"password\")\n        # Check response code\n        response = c.get('/admin/')\n        self.assertEquals(response.status_code, 200)\n        # Check 'Log out' in response\n        self.assertTrue('Log out' in response.content)\n```\n\nNow, if you run `python manage.py test`, you should find that the test passes. Next, we’ll test that we can log out:\n\n```python\ndef test_logout(self):\n        # Create client\n        c = Client()\n        # Log in\n        c.login(username='bobsmith', password=\"password\")\n        # Check response code\n        response = c.get('/admin/')\n        self.assertEquals(response.status_code, 200)\n        # Check 'Log out' in response\n        self.assertTrue('Log out' in response.content)\n        # Log out\n        c.logout()\n        # Check response code\n        response = c.get('/admin/')\n        self.assertEquals(response.status_code, 200)\n        # Check 'Log in' in response\n        self.assertTrue('Log in' in response.content)\n```\n\n","source":"_posts/2015-11-15-django-tutorial.markdown","raw":"---\nlayout: post\ntitle:  \"Django Blog Tutorial\"\ntags: [python, django, web]\ncategories: programming\n---\n\nDjango Blog Tutorial - the Next Generation - Part 1\n====\n\n[original link](http://matthewdaly.co.uk/blog/2013/12/28/django-blog-tutorial-the-next-generation-part-1/)\n\n*edited with new django version*\n[github](https://github.com/4everer/django_test)\n\nThis series will cover exactly the same basic idea of using Django to build a blogging engine, but will expand on what the original series did in many ways. We will cover such additional topics as:\n\n- Using Twitter Bootstrap to make your blog look good without too much hassle\n- Using Virtualenv to sandbox your blog application\n- ~~Using South to effectively manage changes to your database structure~~\n    **use `python manage.py migrate` and `python manage.py makemigrations`**\n- Writing some simple unit tests\n- Deploying the finished application to Heroku\n\nReady? Let’s get started!\n\n\\*unix system\npython 2.7\n\n**prerequests**:\n\n- Virtualenv\n- Pip\n- Git\n- psql\n\n## Beginning work\nWith all that done, we’re ready to get started. Create a folder in a suitable place on your file system and switch into it. I generally keep a dedicated folder in my home directory called Projects to use for all of my projects, and give each project a folder within it - in this case the project is called django_tutorial_blog_ng.\n\nNow, we’ll use Git to keep track of our source code. If you prefer Mercurial, feel free to use that, but this tutorial will assume use of Git, so you’ll want to adapt the commands used accordingly. Start tracking your project with the following command from the shell, when you’re in the project directory:\n\n``` bash\n$ git init\n$ virtualenv venv --distribute\n$ source venv/bin/activate\n$ pip install django-toolbelt\n```\nOnce the installation finish,\n`$ pip freeze > requirements.txt`\n\nNext, we’ll commit these changes with Git:\n\n```bash\n$ git add requirements.txt\n$ git commit -m 'Committed requirements'\n```\n\nNext we’ll add a .gitignore file to ignore our virtualenv - we want to keep this out of version control because it’s something specific to that install. We have all we need to recreate it so we don’t want to store it. In addition, we also want to ignore any compiled Python files (identifiable by the .pyc suffix):\nadd and edit .gitignore file\n>\nvenv/\n*.pyc\n\n\nLet’s commit that too:\n\n``` bash\n$ git add .gitignore\n$ git commit -m 'Added a gitignore file'\n```\n\nNow, let’s generate our project’s basic skeleton:\n```bash\n$ django-admin.py startproject django_tutorial_blog_ng .\n```\n\nThis application skeleton includes a basic configuration which will be sufficient for now, but you will also want to add the SQLite database file to your .gitignore:\n>\nenv/\n*.pyc\ndb.sqlite3\n\nLet’s commit what we’ve done:\n```bash\n$ git add .gitignore django_tutorial_blog_ng/manage.py\n$ git commit -m 'Created project skeleton'\n```\n\nNow, you can create your database. Run the following command:\n\n```bash\n$ python manage.py migrate\n$ python manage.py syncdb\n```\n\nYou’ll be prompted to create a superuser - go ahead and fill in the details. Now, run the following command:\n\n```bash\n$ python manage.py runserver\n```\n\nThis will run Django’s built-in web server on port 8000, and if you click [here](127.0.0.1:8000), you should see a page congratulating you on your first Django-powered page. Once you’re finished with it, you can stop the web server with Ctrl-C.\n\n\n## Your first app\nDjango distinguishes between the concepts of projects and apps. A project is a specific project that may consist of one or more apps, such as a web app, whereas an app is a set of functionality within a project. For instance, one website might include some flat pages, an admin interface, and a blogging engine, and these could easily be different apps. By encouraging you to separate different types of functionality into different apps, Django makes it easier for you to reuse existing content elsewhere.\n\nWe’re going to create our first app, which is the blogging engine. Run the following command to create a basic skeleton for this app:\n\n```bash\n$ python manage.py startapp blogengine\n```\n\n## An introduction to MVC\n![About MVC](/images/djangoBasic_url-dispatch.png)\n\nMVC is a common pattern used in web development. Many web development frameworks can be loosely described as MVC, including Django, Rails, CodeIgniter, Laravel and Symfony, as well as some client-side frameworks like Backbone.js. The basic concept is that a web app is divided into three basic components:\n\n- Models: the data managed with the application\n- Views: the presentation of the data\n- Controllers: an intermediary between the models and the views\n\nNow, Django’s interpretation of MVC is slightly different to many other frameworks. While in most frameworks the views are HTML templates for rendering the data, in Django this role is taken by the templates, and the views are functions or objects that render data from the models using a template. Effectively, you can think of Django’s views as being like controllers in other frameworks, and Django templates as being views.\n\nIn Django, you create your models as Python classes that represent your data, and you use the Django ORM to query the database. As a result, it’s rare to have to directly query your database using SQL, making it more portable between different databases.\n\nNow, our first model is going to be of a blog post. At least initially, each post will have the following attributes:\n>\nA title\nA publication date and time\nSome text\n\nNow, we could just jump straight into creating our first model, but we’re going to make a point of following the practices of test-driven development here. The basic concept of TDD is that you write a failing test before writing any code, then you write the code to pass that test afterwards. It does make things a bit slower, but it’s all too easy to neglect writing tests at all if you leave it till later.\n\nIf you take a look in the **blogengine** folder you’ll notice there’s a file called **tests.py**.\n\nIt’s worth taking a little time to plan out what we want to test from our post model. Each post object will have the attributes I mentioned above, and what we want to be able to do is test that we can:\n\n- Set the title\n- Set the publication date and time\n- Set the text\n- Save it successfully\n- Retrieve it successfully\n\n``` python\n# test.py\nfrom django.test import TestCase\nfrom django.utils import timezone\nfrom blogengine.models import Post\n# Create your tests here.\nclass PostTest(TestCase):\n    def test_create_post(self):\n        # Create the post\n        post = Post()\n        # Set the attributes\n        post.title = 'My first post'\n        post.text = 'This is my first blog post'\n        post.pub_date = timezone.now()\n        # Save it\n        post.save()\n        # Check we can find it\n        all_posts = Post.objects.all()\n        self.assertEquals(len(all_posts), 1)\n        only_post = all_posts[0]\n        self.assertEquals(only_post, post)\n        # Check attributes\n        self.assertEquals(only_post.title, 'My first post')\n        self.assertEquals(only_post.text, 'This is my first blog post')\n        self.assertEquals(only_post.pub_date.day, post.pub_date.day)\n        self.assertEquals(only_post.pub_date.month, post.pub_date.month)\n        self.assertEquals(only_post.pub_date.year, post.pub_date.year)\n        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)\n        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)\n        self.assertEquals(only_post.pub_date.second, post.pub_date.second)\n```\n\nthen edit the **model.py**\n\n```python\nfrom django.db import models\n# Create your models here.\n\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    pub_date = models.DateTimeField()\n    text = models.TextField()\n```\n\nfirst do the migraitons for db\n```bash\npython manage.py makemigrations\npython manage.py migrate\n```\n\nrun the test\n`python managy.py test`\n\nwe can use\n`python manage.py sqlmigrate blogengine 0001`\nto see the migrations\n\n*The `sqlmigrate` command takes migration names and returns their SQL*\n\nrun `python manage.py check` to check before making any migrations\n\n## Creating blog posts via the admin\n\nNow, we need a way to be able to create, edit and delete blog posts. Django’s admin interface allows us to do so easily. However, before we do so, we want to create automated acceptance tests for this functionality, in order to test the ability to create posts from an end-user’s perspective. While unit tests are for testing sections of an application’s functionality from the perspective of other sections of the application, acceptance tests are testing from the user’s perspective. In other words, they test what the application needs to do to be acceptable.\n\nFirst, we will test logging into the admin.\n\nNow, you could put your own credentials in there, but that’s not a good idea because it’s a security risk. Instead, we’ll create a fixture for the test user that will be loaded when the tests are run. Run the following command:\n```bash\n$ python manage.py createsuperuser\n```\n\nGive the username as bobsmith, the email address as bob@example.com, and the password as password. Once that’s done, run these commands to dump the existing users to a fixture:\n```bash\n$ mkdir blogengine/fixtures\n$ python manage.py dumpdata auth.User --indent=2 > blogengine/fixtures/users.json\n```\n\nThis will dump all of the existing users to blogengine/fixtures/users.json. You may wish to edit this file to remove your own superuser account and leave only the newly created one in there.\n\nFirst of all, we import two new objects from `django.test`, `LiveServerTestCase` and `Client`. Then we create the first part of our first test for the admin, named `AdminTest`. Eventually, this will test that we can log successfully into the admin interface. For now, we’re just doing the following:\n\n    - Creating a Client object\n    - Fetching the /admin/ route\n    - Asserting that the status code for this HTTP request is 200, (in other words, that the page was fetched successfully).\n\n``` python\nfrom django.test import TestCase, LiveServerTestCase, Client\nfrom django.utils import timezone\nfrom blogengine.models import Post\n# Create your tests here.\n\n\nclass PostTest(TestCase):\n    def test_create_post(self):\n        # Create the post\n        post = Post()\n        # Set the attributes\n        post.title = 'My first post'\n        post.text = 'This is my first blog post'\n        post.pub_date = timezone.now()\n        # Save it\n        post.save()\n        # Check we can find it\n        all_posts = Post.objects.all()\n        self.assertEquals(len(all_posts), 1)\n        only_post = all_posts[0]\n        self.assertEquals(only_post, post)\n        # Check attributes\n        self.assertEquals(only_post.title, 'My first post')\n        self.assertEquals(only_post.text, 'This is my first blog post')\n        self.assertEquals(only_post.pub_date.day, post.pub_date.day)\n        self.assertEquals(only_post.pub_date.month, post.pub_date.month)\n        self.assertEquals(only_post.pub_date.year, post.pub_date.year)\n        self.assertEquals(only_post.pub_date.hour, post.pub_date.hour)\n        self.assertEquals(only_post.pub_date.minute, post.pub_date.minute)\n        self.assertEquals(only_post.pub_date.second, post.pub_date.second)\n\n\nclass AdminTest(LiveServerTestCase):\n    fixtures = ['users.json']\n    def test_login(self):\n        # Create client\n        c = Client()\n        # Get login page\n        response = c.get('/admin/')\n        # Check response code\n        self.assertEquals(response.status_code, 200)\n        # Check 'Log in' in response\n        self.assertTrue('Log in' in response.content)\n        # Log the user in\n        c.login(username='bobsmith', password=\"password\")\n        # Check response code\n        response = c.get('/admin/')\n        self.assertEquals(response.status_code, 200)\n        # Check 'Log out' in response\n        self.assertTrue('Log out' in response.content)\n```\n\nNow, if you run `python manage.py test`, you should find that the test passes. Next, we’ll test that we can log out:\n\n```python\ndef test_logout(self):\n        # Create client\n        c = Client()\n        # Log in\n        c.login(username='bobsmith', password=\"password\")\n        # Check response code\n        response = c.get('/admin/')\n        self.assertEquals(response.status_code, 200)\n        # Check 'Log out' in response\n        self.assertTrue('Log out' in response.content)\n        # Log out\n        c.logout()\n        # Check response code\n        response = c.get('/admin/')\n        self.assertEquals(response.status_code, 200)\n        # Check 'Log in' in response\n        self.assertTrue('Log in' in response.content)\n```\n\n","slug":"2015-11-15-django-tutorial","published":1,"date":"2015-12-02T23:51:55.000Z","updated":"2015-12-02T23:51:55.000Z","comments":1,"photos":[],"link":"","_id":"cihph500c0019t9s13douw5fi","sticky":0},{"layout":"post","title":"Linux user config","_content":"\n*on Ubuntu 12.04*\n# **useradd**\nrefer [this page](https://www.digitalocean.com/community/tutorials/how-to-add-and-delete-users-on-ubuntu-12-04-and-centos-6)\n\nTo add a new user in Ubuntu, use the adduser command, replacing the “newuser” with your preferred username.\n\n`sudo adduser newuser`\n\nAs soon as you type this command, Ubuntu will automatically start the process:\n\nType in and confirm your password\nEnter in the user’s information. This is not required, pressing enter will automatically fill in the field with the default information\nPress Y (or enter) when Ubuntu asks you if the information is correct\nCongratulations—you have just added a new user. You can log out of the root user by typing exit and then logging back in with the new username and password.\n\n___\n\n# **How to Grant a User Root Privileges**\nAs mentioned earlier, you are much better off using a user with root privileges.\nYou can create the sudo user by opening the sudoers file with this command:\n`sudo /usr/sbin/visudo`\n\nAdding the user’s name and the same permissions as root under the the user privilege specification will grant them the sudo privileges.\n``` bash\n#User privilege specification\nroot      ALL=(ALL:ALL) ALL\nnewuser   ALL=(ALL:ALL) ALL\n```\nPress ‘cntrl x’ to exit the file and then ‘Y’ to save it.\n\n# **Delete a USER Account with UID 0**\nYou won't be able to delete second root user with another UID 0 using userdel command.\n``` bash\nuserdel john\n> $ userdel: user john is currently used by process 1\n```\n\nTo delete user john with UID 0, open /etc/passwd file and change john's UID.\nFor example, change the line :\n``` bash\n> john:x:0:0::/home/john:/bin/sh\n```\nto something like:\n``` bash\n> john:x:1111:0::/home/john:/bin/sh\n```\nNow, you'll be able to delete user john with userdel command: `userdel john`\n","source":"_posts/2014-11-18-linux-user-config.markdown","raw":"---\nlayout: post\ntitle:  \"Linux user config\"\ntags: [linux]\ncategories: programming\n---\n\n*on Ubuntu 12.04*\n# **useradd**\nrefer [this page](https://www.digitalocean.com/community/tutorials/how-to-add-and-delete-users-on-ubuntu-12-04-and-centos-6)\n\nTo add a new user in Ubuntu, use the adduser command, replacing the “newuser” with your preferred username.\n\n`sudo adduser newuser`\n\nAs soon as you type this command, Ubuntu will automatically start the process:\n\nType in and confirm your password\nEnter in the user’s information. This is not required, pressing enter will automatically fill in the field with the default information\nPress Y (or enter) when Ubuntu asks you if the information is correct\nCongratulations—you have just added a new user. You can log out of the root user by typing exit and then logging back in with the new username and password.\n\n___\n\n# **How to Grant a User Root Privileges**\nAs mentioned earlier, you are much better off using a user with root privileges.\nYou can create the sudo user by opening the sudoers file with this command:\n`sudo /usr/sbin/visudo`\n\nAdding the user’s name and the same permissions as root under the the user privilege specification will grant them the sudo privileges.\n``` bash\n#User privilege specification\nroot      ALL=(ALL:ALL) ALL\nnewuser   ALL=(ALL:ALL) ALL\n```\nPress ‘cntrl x’ to exit the file and then ‘Y’ to save it.\n\n# **Delete a USER Account with UID 0**\nYou won't be able to delete second root user with another UID 0 using userdel command.\n``` bash\nuserdel john\n> $ userdel: user john is currently used by process 1\n```\n\nTo delete user john with UID 0, open /etc/passwd file and change john's UID.\nFor example, change the line :\n``` bash\n> john:x:0:0::/home/john:/bin/sh\n```\nto something like:\n``` bash\n> john:x:1111:0::/home/john:/bin/sh\n```\nNow, you'll be able to delete user john with userdel command: `userdel john`\n","slug":"2014-11-18-linux-user-config","published":1,"date":"2015-12-02T22:59:00.000Z","updated":"2015-11-22T21:44:54.000Z","comments":1,"photos":[],"link":"","_id":"cihph500i001et9s138p3k9gi","sticky":0}],"PostAsset":[],"PostCategory":[{"post_id":"cihph4zyq0000t9s19ppl5vkz","category_id":"cihph4zyx0001t9s1jfsjknf0","_id":"cihph4zz10004t9s1pwvf7fyv"},{"post_id":"cihph4zzf000bt9s19fko8l87","category_id":"cihph4zzg000ct9s126cs2pc2","_id":"cihph4zzi000ft9s1lpakajhl"},{"post_id":"cihph4zzm000lt9s1o256xyw8","category_id":"cihph4zzx000mt9s12vuaw61e","_id":"cihph4zzx000pt9s1vhv7gdes"},{"post_id":"cihph4zzz000qt9s12lfrrtr6","category_id":"cihph4zzg000ct9s126cs2pc2","_id":"cihph5000000rt9s1albv9uwa"},{"post_id":"cihph5003000xt9s1dkwdnb1c","category_id":"cihph5004000yt9s1q2br5loi","_id":"cihph50050011t9s1nxe0o223"},{"post_id":"cihph50060012t9s1m0i1gf90","category_id":"cihph50070013t9s1l2p9y6n6","_id":"cihph50090016t9s1iqfbksvb"},{"post_id":"cihph500c0019t9s13douw5fi","category_id":"cihph4zzg000ct9s126cs2pc2","_id":"cihph500f001at9s10h0cufoj"},{"post_id":"cihph500i001et9s138p3k9gi","category_id":"cihph4zzg000ct9s126cs2pc2","_id":"cihph500j001ft9s186rdrat0"}],"PostTag":[{"post_id":"cihph4zyq0000t9s19ppl5vkz","tag_id":"cihph4zyy0002t9s1kzom5wvi","_id":"cihph4zz10005t9s10p4egclo"},{"post_id":"cihph4zyq0000t9s19ppl5vkz","tag_id":"cihph4zz00003t9s1ib9fl3o9","_id":"cihph4zz20006t9s1k1u44s64"},{"post_id":"cihph4zzf000bt9s19fko8l87","tag_id":"cihph4zzg000dt9s14y3vpqqc","_id":"cihph4zzj000ht9s1vw29zpb2"},{"post_id":"cihph4zzf000bt9s19fko8l87","tag_id":"cihph4zzi000et9s1istt1gqk","_id":"cihph4zzj000it9s1em4sqe5x"},{"post_id":"cihph4zzf000bt9s19fko8l87","tag_id":"cihph4zzj000gt9s1d6ijhkoh","_id":"cihph4zzj000jt9s1lwoh3nmn"},{"post_id":"cihph4zzf000bt9s19fko8l87","tag_id":"cihph4zz00003t9s1ib9fl3o9","_id":"cihph4zzk000kt9s1c7qai8j8"},{"post_id":"cihph4zzm000lt9s1o256xyw8","tag_id":"cihph4zzx000nt9s1jd646mme","_id":"cihph4zzx000ot9s1p3neh3a4"},{"post_id":"cihph4zzz000qt9s12lfrrtr6","tag_id":"cihph4zzj000gt9s1d6ijhkoh","_id":"cihph5001000ut9s197x9kbo1"},{"post_id":"cihph4zzz000qt9s12lfrrtr6","tag_id":"cihph5000000st9s1b8gw0sry","_id":"cihph5001000vt9s1t71pakt7"},{"post_id":"cihph4zzz000qt9s12lfrrtr6","tag_id":"cihph5001000tt9s1dnyo2dk4","_id":"cihph5001000wt9s1utlku5oz"},{"post_id":"cihph5003000xt9s1dkwdnb1c","tag_id":"cihph5004000zt9s1ty1mpq5f","_id":"cihph50050010t9s1qgggluk8"},{"post_id":"cihph50060012t9s1m0i1gf90","tag_id":"cihph50080014t9s1wi02803g","_id":"cihph50090017t9s18g16si84"},{"post_id":"cihph50060012t9s1m0i1gf90","tag_id":"cihph50090015t9s14yk32zuv","_id":"cihph50090018t9s1xkjbdodu"},{"post_id":"cihph500c0019t9s13douw5fi","tag_id":"cihph4zzj000gt9s1d6ijhkoh","_id":"cihph500f001bt9s12u7f15cn"},{"post_id":"cihph500c0019t9s13douw5fi","tag_id":"cihph5000000st9s1b8gw0sry","_id":"cihph500g001ct9s1aesh08jd"},{"post_id":"cihph500c0019t9s13douw5fi","tag_id":"cihph5001000tt9s1dnyo2dk4","_id":"cihph500g001dt9s1nkahdjph"},{"post_id":"cihph500i001et9s138p3k9gi","tag_id":"cihph4zz00003t9s1ib9fl3o9","_id":"cihph500j001gt9s1rxjsazo2"}],"Tag":[{"name":"VPS","_id":"cihph4zyy0002t9s1kzom5wvi"},{"name":"linux","_id":"cihph4zz00003t9s1ib9fl3o9"},{"name":"programming","_id":"cihph4zzg000dt9s14y3vpqqc"},{"name":"git","_id":"cihph4zzi000et9s1istt1gqk"},{"name":"python","_id":"cihph4zzj000gt9s1d6ijhkoh"},{"name":"shell config","_id":"cihph4zzx000nt9s1jd646mme"},{"name":"django","_id":"cihph5000000st9s1b8gw0sry"},{"name":"web","_id":"cihph5001000tt9s1dnyo2dk4"},{"name":"test","_id":"cihph5004000zt9s1ty1mpq5f"},{"name":"tissue culture","_id":"cihph50080014t9s1wi02803g"},{"name":"method","_id":"cihph50090015t9s14yk32zuv"}]}}